{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/10/18/hello-world/"},{"title":"첫 블로그 작업","text":"제목입니다.내용입니다!","link":"/2020/10/18/%EC%9E%91%EC%97%85/"},{"title":"","text":"출처:https://velog.io/@stampid/REST-API%EC%99%80-RESTful-API#1-rest%EB%9E%80 https://velog.io/@pa324/%EA%B0%9C%EB%B0%9C-%EC%83%81%EC%8B%9D-RESTful-API REST API와 RESTful API에 대해서 알아보자1. REST란 무엇인가? Representational State Transfer의 약자, 소프트웨어 프로그램 개발의 아키텍처의 한 형식 자원을 URI로 표시하고 해당 자원의 상태를 주고 받는 것을 의미 구성요소 : 자원(Resource) : URI 행위(Verb) : HTTP METHOD 표현(Representations) REST는 URI를 통해 자원을 표시하고, HTTP METHOD를 통해 자원의 행위를 정해주고, 그 결과를 받는 것을 말한다 2. 특징 Uniform Interface(유니폼 인터페이스)HTTP 표준만 따른다면 어떤 언어 혹은 어떤 플랫폼에서도 사용 가능한 인터페이스 스타일. 안드로이드 플랫폼, IOS 플랫폼 등 특정 언어나 플랫폼에 종속되지 않고 사용 가능. Stateless (상태 정보 유지 안함)REST는 상태 정보를 유지하지 않는다. 서버는 각각의 요청을 완전히 다른 것으로 인식하고 처리 한다. 이전 요청이 다음 요청 처리에 연관이 되면 안된다. Cacheable(캐시 가능)HTTP의 기존 웹 표준을 그대로 사용하기 때문에 HTTP가 가진 캐싱 기능 적용이 가능하다. Self-descriptiveness(자체 표현 구조)REST API 메시지만 보고 쉽게 이해할 수 있는 자체 표현 구조로 되어있다. Client-Server구조REST 서버는 API제공을 하고 클라이언트는 사용자 인증에 관련된 일들을 직접 처리한다. 자원이 있는 쪽을 Server라고 하고 자원을 요청하는 쪽이 Client가 된다. 서로간의 의존성이 줄어들기 때문에 역할이 호가실하게 구분되어 개발해야할 내용들이 명확해진다. Layerd System (계층화)클라이언트는 REST API 서버만 호출한다. REST 서버는 다중 계층으로 구성될 수 있으면 로드 밸런싱, 암호화, 사용자 인증 등을 추가하여 구조상의 유연성을 둘 수 있다. 3. REST API란 무엇인가? REST 기반의 규칙들을 지켜서 설계된 API를 REST API 또는 RESTful API라고 한다. 4. REST API 설계 규칙 URI는 정보의 자원을 표현해야 한다. 자원의 이름은 동사보다는 명사를 사용한다. URI는 자원을 표현하는데 중점을 두어야 하기 때문에 행위에 대한 표현이 들어가면 안된다. (URI에 HTTP METHOD와 행위에 대한 동사 표현이 들어가면 안된다.) 123456ex)잘못된 디자인 :GET/users/delete/1올바른 디자인 :GET/users/1 URI에 자원의 행위에 대한 표현이 들어가지 않는 대신, HTTP METHOD를 통해 대신한다. 123GET/users/1 1 ID를 가진 유저 정보 가져오기DELETE/users/1 1 ID를 가진 유저 정보 삭제POST/users 유저 생성 슬래시( / )는 계층 관계를 나타날 때 사용, 하지만 마지막은 /를 사용하면 안된다. 12http://restapi.test.com/users/board/ (X)http://restapi.test.com/users/board (O) 하이픈 ( - )은 URI의 가독성을 높이는데 사용하지만, 언더바( _ )는 URI에 사용하지 않는다. 언더바는 보기 어렵거나 언더바로 문자가 가려지기도 하기 때문. 그래서 하이픈 사용. URI경로에는 소문자를 사용. 대소문자는 각자 다른 리소스로 인식하기 때문에, 대문자 사용을 피해야 한다. 파일 확장자는 URI에 포함하지 않는다. 5. HTTP METHOD POST 해당 URI를 요청하면 리소스를 생성 GET 해당 리소스 조회 PUT 해당 리소스 수정 DELETE 해당 리소스 삭제 6. RESTFUL API란 무엇인가? REST를 REST답게 쓰기 위한 방법, 공식적으로 누군가 발표한 것은 아니지만, 목적은 이해하기 쉽고 사용하기 쉬운 REST API를 만드는 것. CRUD | HTTP METHOD | URI user들을 표시 | GET | /users user 하나만 표시 | GET | /users/:id user 생성 | POST | users user 수정 | PUT | /users/:id user 삭제 | DELETE | /users/:id RESTful 하지 못한 경우 : CRUD 기능을 전부 POST METHOD로만 처리하는 API URI에 자원과 id 외에 다른 정보가 들어가는 경우 12PUT /users/update-nickname [x]PUT /users/:id/nickname [O] 7. HTTP 응답 코드 2xx 성공 200: 클라이언트의 요청을 정상적으로 수행함. 201: 클라이언트에게 생성 작업을 요청 받았고, 생성 작업을 성공함. 204: 요청은 성공 했지만 응답할 콘텐츠가 없음. 3xx 리다이렉션 301: 클라이언트가 요청한 리소스에 대한 URI가 영구적으로 변경되었을 때 사용함. 302: 301과 같으나 임시적으로 주소가 바뀌었을 경우 사용함. 304: 이전에 방문했을 때의 요청 결과와 다르지 않을 경우 사용함. 캐시된 페이지를 그대로 사용. 307: 임시 페이지로 리다이렉트. 4xx 클라이언트 오류 400: 클라이언트가 올바르지 못한 요청을 보냄. 401: 로그인을 하지 않아 페이지를 열 권한이 없음. 403: 금지된 페이지, 로그인을 하든 안하든 접근할 수 없음. (관리자 페이지) 404: 찾을 수 없는 페이지, 주소를 잘 못 입력했을 때 사용함.403 대신에 사용할 수도 있음.(해커들의 공격을 방지하고자 페이지가 없는 것처럼 위장함) 408: 요청 시간이 초과됨. 409: 서버가 요청을 처리하는 과정에서 충돌이 발생한 경우. (회원가입 중 중복된 아이디인 경우) 410: 영구적으로 사용할 수 없는 페이지. 5xx 서버 오류 501: 해당 요청을 처리하는 기능이 만들어지지 않음. 502: 서버로 가능 요청이 중간에서 유실된 경우. 503: 서버가 터졌거나 유지 보수 중(유지 보수 중일때는 유지 보수중이라는 것을 알려주는 페이지로 전송해주는 것이 좋음) 504: 서버 게이트웨이에 문제가 생겨 시간 초과가 된 경우. 505: HTTP 버전이 달라 요청이 처리할 수 없음.","link":"/2020/10/20/REST%20API%EC%99%80%20RESTful%20API%EC%97%90%20%EB%8C%80%ED%95%B4%EC%84%9C%20%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90/"}],"tags":[],"categories":[]}